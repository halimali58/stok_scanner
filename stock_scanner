# Gerekli k√ºt√ºphaneleri y√ºkleyin (Colab i√ßin ayrƒ± olarak √ßalƒ±≈ütƒ±rƒ±labilir)

!pip install schedule yfinance pandas numpy openpyxl
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime
import pytz
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import schedule
import time
import os
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter
import base64
from IPython.display import HTML, display  # Colab i√ßin
import sys

# T√ºrkiye saat dilimi
turkey_tz = pytz.timezone('Europe/Istanbul')

# Sembol listesi ve diƒüer deƒüi≈ükenler
symbols = [
    'AKENR.IS', 'EUREN.IS', 'EDATA.IS', 'ISBTR.IS', 'THYAO.IS', 'SISE.IS',
    'BIMAS.IS', 'ASELS.IS', 'KCHOL.IS', 'GARAN.IS', 'SAHOL.IS', 'AKBNK.IS',
    'YKBNK.IS', 'HALKB.IS', 'ISCTR.IS', 'VAKBN.IS', 'FROTO.IS', 'TOASO.IS',
    'TUPRS.IS', 'PETKM.IS', 'HEKTS.IS', 'SASA.IS', 'KORDS.IS', 'KOZAL.IS',
    'KOZAA.IS', 'ENJSA.IS', 'GWIND.IS', 'PGSUS.IS', 'ALARK.IS', 'ODAS.IS'
]

timeframes = {
    '1h': '30d',
    '2h': '1mo',
    '4h': '60d',
    '1d': '6mo',
    '1wk': '2y',
    '1mo': '10y'
}

timeframes_tr = {
    '1h': 'Saatlik',
    '2h': '2 Saatlik',
    '4h': '4 Saatlik',
    '1d': 'G√ºnl√ºk',
    '1wk': 'Haftalƒ±k',
    '1mo': 'Aylƒ±k'
}

tab_colors = {
    'Saatlik': '87CEEB',    # Light Blue (SkyBlue)
    '2 Saatlik': '98FB98',  # Light Green (PaleGreen)
    '4 Saatlik': 'FFFFE0',  # Light Yellow (LightYellow)
    'G√ºnl√ºk': 'FF9800',     # Light Orange (PeachPuff)
    'Haftalƒ±k': 'E6E6FA',   # Light Purple (Lavender)
    'Aylƒ±k': 'FFB6C1'       # Light Pink (LightPink)
}

min_confirm_bars = 2
max_confirm_bars = 5

# Fonksiyonlar
def get_2h_data(symbol, period="1mo"):
    try:
        df_1h = yf.download(symbol, period=period, interval="60m", progress=False)
        if df_1h.empty:
            print(f"[UYARI] {symbol} i√ßin 1 saatlik veri bo≈ü.")
            return None
        if isinstance(df_1h.columns, pd.MultiIndex):
            df_1h.columns = df_1h.columns.get_level_values(0)
        df_1h.index = pd.to_datetime(df_1h.index, utc=True).tz_convert('Europe/Istanbul')
        df_2h = df_1h.resample('2h').agg({
            'Open': 'first',
            'High': 'max',
            'Low': 'min',
            'Close': 'last',
            'Volume': 'sum'
        })
        df_2h.dropna(inplace=True)
        if df_2h.empty:
            print(f"[UYARI] {symbol} i√ßin 2 saatlik resample sonrasƒ± veri bo≈ü.")
            return None
        return df_2h
    except Exception as e:
        print(f"[HATA] {symbol} 2 saatlik veri alƒ±nƒ±rken hata: {e}")
        return None

def compute_supertrend(df, atr_period=10, factor=3.0, atrline=1.5):
    df = df.copy()
    df['TR'] = pd.concat([
        df['High'] - df['Low'],
        (df['High'] - df['Close'].shift()).abs(),
        (df['Low'] - df['Close'].shift()).abs()
    ], axis=1).max(axis=1)
    df['ATR'] = df['TR'].rolling(window=atr_period).mean()
    df['hl2'] = (df['High'] + df['Low']) / 2
    df['upperband'] = df['hl2'] + factor * df['ATR']
    df['lowerband'] = df['hl2'] - factor * df['ATR']

    n = len(df)
    direction = np.zeros(n, dtype=int)
    supertrend = np.zeros(n)

    close = df['Close'].values
    upperband = df['upperband'].values
    lowerband = df['lowerband'].values

    if n > 0 and not np.isnan(lowerband[0]):
        supertrend[0] = lowerband[0]
        direction[0] = 1

    for i in range(1, n):
        close_i = close[i]
        supertrend_prev = supertrend[i - 1]
        direction_prev = direction[i - 1]
        upperband_i = upperband[i]
        lowerband_i = lowerband[i]

        if close_i > supertrend_prev:
            direction[i] = 1
        elif close_i < supertrend_prev:
            direction[i] = -1
        else:
            direction[i] = direction_prev

        if direction[i] == 1:
            supertrend[i] = max(lowerband_i, supertrend_prev)
        else:
            supertrend[i] = min(upperband_i, supertrend_prev)

    df['supertrend'] = supertrend
    df['direction'] = direction
    df['upatrline'] = df['supertrend'] + atrline * df['ATR']
    df['dnatrline'] = df['supertrend'] - atrline * df['ATR']

    return df

def to_scalar(value):
    if isinstance(value, (pd.Series, np.ndarray)):
        return value.item() if value.size == 1 else value
    return value

def get_signals(df, minConfirmBars=2, maxConfirmBars=5):
    last_buy_signal = None
    last_sell_signal = None
    last_buy_row = None
    last_sell_row = None

    direction = df['direction'].values
    close = df['Close'].values
    supertrend = df['supertrend'].values

    turnGreen = (direction[1:] > direction[:-1])
    turnRed = (direction[1:] < direction[:-1])
    turnGreen = np.insert(turnGreen, 0, False)
    turnRed = np.insert(turnRed, 0, False)

    all_green_turn_indices = np.where(turnGreen)[0]
    all_red_turn_indices = np.where(turnRed)[0]

    confirmAL = False
    if len(all_green_turn_indices) > 0:
        last_green_turn_idx = all_green_turn_indices[-1]
        barSinceTurnGreen = len(df) - 1 - last_green_turn_idx
        if minConfirmBars <= barSinceTurnGreen <= maxConfirmBars:
            confirmAL = True
            for i in range(minConfirmBars):
                check_idx = last_green_turn_idx + 1 + i
                if check_idx >= len(df) or close[check_idx] <= supertrend[check_idx]:
                    confirmAL = False
                    break

    confirmSAT = False
    if len(all_red_turn_indices) > 0:
        last_red_turn_idx = all_red_turn_indices[-1]
        barSinceTurnRed = len(df) - 1 - last_red_turn_idx
        if minConfirmBars <= barSinceTurnRed <= maxConfirmBars:
            confirmSAT = True
            for i in range(minConfirmBars):
                check_idx = last_red_turn_idx + 1 + i
                if check_idx >= len(df) or close[check_idx] >= supertrend[check_idx]:
                    confirmSAT = False
                    break

    if confirmAL:
        start_idx = max(0, len(df) - 60)
        alPrice = to_scalar(df['Low'].iloc[start_idx:].min())
        last_price = to_scalar(close[-1])
        symbol = df['Symbol'].iloc[0]
        last_buy_signal = f"{symbol} - AL - Low: {alPrice:.2f}".replace('.', ',') + f" - Son: {last_price:.2f}".replace('.', ',')
        last_buy_row = [symbol, "AL", f"{alPrice:.2f}".replace('.', ','), f"{last_price:.2f}".replace('.', ',')]

    if confirmSAT:
        start_idx = max(0, len(df) - 60)
        satPrice = to_scalar(df['High'].iloc[start_idx:].max())
        last_price = to_scalar(close[-1])
        symbol = df['Symbol'].iloc[0]
        last_sell_signal = f"{symbol} - SAT - High: {satPrice:.2f}".replace('.', ',') + f" - Son: {last_price:.2f}".replace('.', ',')
        last_sell_row = [symbol, "SAT", f"{satPrice:.2f}".replace('.', ','), f"{last_price:.2f}".replace('.', ',')]

    return last_buy_signal, last_sell_signal, last_buy_row, last_sell_row

# E-posta ayarlarƒ±
EMAIL_ADDRESS = "alijak5818@gmail.com"
EMAIL_PASSWORD = "izrj dcea aclf nbii"
RECIPIENT_EMAIL = "halimali58@hotmail.com"
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587

def send_email(excel_file_name):
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_ADDRESS
        msg['To'] = RECIPIENT_EMAIL
        msg['Subject'] = f"Dip Tepe Tarama Sonu√ßlarƒ± - {datetime.now(turkey_tz).strftime('%d-%m-%Y %H:%M')}"

        body = "Merhaba,\n\nEkli dosyada dip ve tepe tarama sonu√ßlarƒ± bulunmaktadƒ±r.\n\nƒ∞yi g√ºnler,\nOtomatik Tarama Sistemi"
        msg.attach(MIMEText(body, 'plain'))

        with open(excel_file_name, 'rb') as attachment:
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(attachment.read())

        encoders.encode_base64(part)

        part.add_header(
            'Content-Disposition',
            f'attachment; filename= {excel_file_name}'
        )

        msg.attach(part)

        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        text = msg.as_string()
        server.sendmail(EMAIL_ADDRESS, RECIPIENT_EMAIL, text)
        server.quit()

        print(f"‚úÖ {excel_file_name} dosyasƒ± {RECIPIENT_EMAIL} adresine ba≈üarƒ±yla g√∂nderildi.")
    except Exception as e:
        print(f"‚ö†Ô∏è E-posta g√∂nderilirken hata: {e}")

def provide_download_link(excel_file_name):
    try:
        # Colab ortamƒ±nda √ßalƒ±≈üƒ±yorsa
        if 'google.colab' in sys.modules:
            with open(excel_file_name, 'rb') as f:
                veri = f.read()
                b64 = base64.b64encode(veri).decode()
                href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{excel_file_name}">üì• Excel dosyasƒ±nƒ± indirmek i√ßin tƒ±klayƒ±n</a>'
                display(HTML(href))
        else:
            print(f"‚úÖ Excel dosyasƒ± olu≈üturuldu: {excel_file_name}. L√ºtfen dosya sisteminizden indirin.")
    except Exception as e:
        print(f"‚ö†Ô∏è Excel dosyasƒ± i√ßin indirme baƒülantƒ±sƒ± olu≈üturulurken hata: {e}")

def run_analysis():
    now_file = datetime.now(turkey_tz).strftime("%d-%m-%Y_%H.%M")
    excel_file_name = f"Dip_Tepe_Tarama_Tum_Zamanlar_{now_file}.xlsx"
    now = datetime.now(turkey_tz).strftime("%d-%m-%Y %H:%M")

    with pd.ExcelWriter(excel_file_name, engine='openpyxl') as writer:
        for tf, period in timeframes.items():
            print(f"\nüìà {timeframes_tr[tf]} Zaman Dilimi - Sƒ∞NYALLER ({now})\n")
            buy_rows = []
            sell_rows = []

            for sym in symbols:
                print(f"Veri √ßekiliyor: {sym}")
                try:
                    if tf == '2h':
                        df = get_2h_data(sym, period=period)
                        if df is None:
                            continue
                        df['Symbol'] = sym.replace('.IS', '')
                    else:
                        df = yf.download(sym, period=period, interval=tf, progress=False)
                        if df.empty:
                            print(f"{sym} i√ßin veri bulunamadƒ±.")
                            continue
                        df['Symbol'] = sym.replace('.IS', '')
                        df.index = pd.to_datetime(df.index, utc=True).tz_convert('Europe/Istanbul')

                    df = compute_supertrend(df)
                    buy_signal, sell_signal, buy_row, sell_row = get_signals(
                        df, minConfirmBars=min_confirm_bars, maxConfirmBars=max_confirm_bars)

                    if buy_row:
                        buy_rows.append(buy_row)
                        print(f"üìà AL Sinyali: {buy_signal}")
                    if sell_row:
                        sell_rows.append(sell_row)
                        print(f"üìâ SAT Sinyali: {sell_signal}")

                except Exception as e:
                    print(f"[HATA] {sym} {tf} veri i≈ülenirken hata: {e}")

            if buy_rows or sell_rows:
                columns = ["Sembol", "Sinyal", "Fiyat", "Son Fiyat"]
                df_buy = pd.DataFrame(buy_rows, columns=columns) if buy_rows else pd.DataFrame(columns=columns)
                df_sell = pd.DataFrame(sell_rows, columns=columns) if sell_rows else pd.DataFrame(columns=columns)

                combined_rows = []
                if not df_buy.empty:
                    combined_rows.append([f"üìà AL Sinyali ({now})", "", "", ""])
                    combined_rows.append(columns)
                    combined_rows.extend(df_buy.values.tolist())
                    combined_rows.append(["", "", "", ""])
                if not df_sell.empty:
                    combined_rows.append([f"üìâ SAT Sinyali ({now})", "", "", ""])
                    combined_rows.append(columns)
                    combined_rows.extend(df_sell.values.tolist())

                df_combined = pd.DataFrame(combined_rows, columns=columns)
                df_combined.to_excel(writer, sheet_name=f"{timeframes_tr[tf]}", index=False, header=False)

                worksheet = writer.sheets[f"{timeframes_tr[tf]}"]
                worksheet.sheet_properties.tabColor = tab_colors.get(timeframes_tr[tf], 'FFFFFF')
                bold_font = Font(bold=True)
                center_alignment = Alignment(horizontal='center', vertical='center')
                light_green_fill = PatternFill(start_color='90EE90', end_color='90EE90', fill_type='solid')
                light_red_fill = PatternFill(start_color='FF9999', end_color='FF9999', fill_type='solid')

                row_idx = 1
                for row in combined_rows:
                    if row[0].startswith("üìà") or row[0].startswith("üìâ"):
                        worksheet.merge_cells(start_row=row_idx, start_column=1, end_row=row_idx, end_column=4)
                        cell = worksheet.cell(row=row_idx, column=1)
                        cell.font = bold_font
                        cell.alignment = center_alignment
                    elif row == columns:
                        for col_idx in range(1, 5):
                            cell = worksheet.cell(row=row_idx, column=col_idx)
                            cell.font = bold_font
                            cell.alignment = center_alignment
                    else:
                        for col_idx in range(1, 5):
                            cell = worksheet.cell(row=row_idx, column=col_idx)
                            cell.alignment = center_alignment
                            if col_idx == 2 and cell.value == "AL":
                                cell.fill = light_green_fill
                            elif col_idx == 2 and cell.value == "SAT":
                                cell.fill = light_red_fill
                    row_idx += 1

                for col_idx in range(1, 5):
                    column_letter = get_column_letter(col_idx)
                    worksheet.column_dimensions[column_letter].width = 15
            else:
                print(f"{timeframes_tr[tf]} i√ßin sinyal bulunamadƒ±.")

    print("‚úÖ Excel dosyasƒ± ba≈üarƒ±yla olu≈üturuldu.")
    send_email(excel_file_name)
    provide_download_link(excel_file_name)
    # Dosyayƒ± sil (isteƒüe baƒülƒ±, manuel indirme sonrasƒ± silmek i√ßin)
    try:
        os.remove(excel_file_name)
        print(f"üóëÔ∏è {excel_file_name} dosyasƒ± silindi.")
    except Exception as e:
        print(f"‚ö†Ô∏è Dosya silinirken hata: {e}")

# Belirttiƒüiniz saatte √ßalƒ±≈üacak zamanlama
desired_time = "19:00"  # ƒ∞stediƒüiniz saati buraya girin
schedule.every().monday.at(desired_time).do(run_analysis)
schedule.every().tuesday.at(desired_time).do(run_analysis)
schedule.every().wednesday.at(desired_time).do(run_analysis)
schedule.every().thursday.at(desired_time).do(run_analysis)
schedule.every().friday.at(desired_time).do(run_analysis)

print(f"‚è∞ Zamanlayƒ±cƒ± ba≈ülatƒ±ldƒ±. Hafta i√ßi her g√ºn saat {desired_time}'da tarama yapƒ±lacak...")

# Hemen test etmek i√ßin
run_analysis()

# Zamanlayƒ±cƒ±yƒ± √ßalƒ±≈ütƒ±rmak i√ßin (otomatik √ßalƒ±≈ütƒ±rma i√ßin uncomment edin)
# while True:
#     schedule.run_pending()
#     time.sleep(60) bu 
